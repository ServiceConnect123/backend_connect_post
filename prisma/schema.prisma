generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl", "debian-openssl-3.0.x", "darwin"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id            String        @id @default(cuid())
  name          String
  nit           String        @unique
  email         String
  phone         String
  address       String
  countryId     String        @map("country_id")
  cityId        String        @map("city_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  city          City          @relation(fields: [cityId], references: [id])
  country       Country       @relation(fields: [countryId], references: [id])
  userCompanies UserCompany[]

  @@map("companies")
}

model Country {
  id        String    @id @default(cuid())
  key       String    @unique
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  cities    City[]
  companies Company[]

  @@map("countries")
}

model City {
  id        String    @id @default(cuid())
  key       String    @unique
  value     String
  countryId String    @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  companies Company[]

  @@map("cities")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPublished Boolean  @default(false) @map("is_published")
  tags        String[]
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id             String             @id @default(cuid())
  supabaseUuid   String             @unique @map("supabase_uuid")
  email          String
  firstName      String             @map("first_name")
  lastName       String             @map("last_name")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  documentNumber String?            @map("document_number")
  documentType   String?            @map("document_type")
  phone          String?
  posts          Post[]
  companies      UserCompany[]
  configuration  UserConfiguration?

  @@map("users")
}

model UserCompany {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  companyId  String   @map("company_id")
  role       UserRole @default(USER)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  isSelected Boolean  @default(false) @map("is_selected")
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([userId, isSelected])
  @@map("user_companies")
}

model UserConfiguration {
  id               String     @id @default(cuid())
  userId           String     @unique @map("user_id")
  dateFormat       String     @default("DD/MM/YYYY") @map("date_format")
  timeFormatId     String?    @map("time_format_id")
  languageId       String?    @map("language_id")
  currencyId       String?    @map("currency_id")
  decimalSeparator String     @default(",") @map("decimal_separator")
  itemsPerPage     Int        @default(20) @map("items_per_page")
  theme            String     @default("light")
  primaryColor     String     @default("#1976d2") @map("primary_color")
  createdAt        DateTime   @default(now()) @map("created_at")
  updatedAt        DateTime   @updatedAt @map("updated_at")
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeFormat       TimeFormat? @relation(fields: [timeFormatId], references: [id])
  language         Language?   @relation(fields: [languageId], references: [id])
  currency         Currency?   @relation(fields: [currencyId], references: [id])

  @@map("users_configuration")
}

model TimeFormat {
  id                 String              @id @default(cuid())
  value              String              @unique
  name               String
  description        String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userConfigurations UserConfiguration[]

  @@map("time_formats")
}

model Language {
  id                 String              @id @default(cuid())
  code               String              @unique
  name               String
  nativeName         String?
  country            String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userConfigurations UserConfiguration[]

  @@map("languages")
}

model Currency {
  id                 String              @id @default(cuid())
  code               String              @unique
  name               String
  symbol             String
  country            String
  type               String
  decimalPlaces      Int                 @default(2)
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userConfigurations UserConfiguration[]

  @@map("currencies")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}
