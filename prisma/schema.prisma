generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl", "debian-openssl-3.0.x", "darwin"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id           String        @id @default(cuid())
  name         String
  nit          String        @unique
  email        String
  phone        String
  address      String
  countryId    String        @map("country_id")
  cityId       String        @map("city_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  city         City          @relation(fields: [cityId], references: [id])
  country      Country       @relation(fields: [countryId], references: [id])
  userCompanies UserCompany[]

  @@map("companies")
}

model Country {
  id        String    @id @default(cuid())
  key       String    @unique
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  cities    City[]
  companies Company[]

  @@map("countries")
}

model City {
  id        String    @id @default(cuid())
  key       String    @unique
  value     String
  countryId String    @map("country_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  companies Company[]

  @@map("cities")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  isPublished Boolean  @default(false) @map("is_published")
  tags        String[]
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id            String        @id @default(cuid())
  supabaseUuid  String        @unique @map("supabase_uuid")
  email         String
  firstName     String        @map("first_name")
  lastName      String        @map("last_name")
  phone         String?
  documentType  String?       @map("document_type")
  documentNumber String?      @map("document_number")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  posts         Post[]
  companies     UserCompany[]

  @@map("users")
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  companyId String   @map("company_id")
  role      UserRole @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("user_companies")
}

enum UserRole {
  ADMIN
  USER
  MODERATOR
}
